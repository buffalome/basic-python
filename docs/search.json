[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "website",
    "section": "",
    "text": "This is a Quarto website.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites.",
    "crumbs": [
      "Introduction"
    ]
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "q1_variable.html",
    "href": "q1_variable.html",
    "title": "Variables",
    "section": "",
    "text": "In computer programming, variables act as containers that store data in a program. They allow for easy management of information throughout a program’s run. Python uses a system called dynamic typing, which figures out the type of data in a variable based on what is stored in it. This feature helps make Python easy for new programmers to learn.\n\n\n\nWhen creating variables in Python, certain naming rules must be followed:\n\nThe first character must be a letter (a-z, A-Z) or an underscore (_).\nAfter the first character, the name can include letters, numbers, and underscores.\nVariable names are case-sensitive. This means age, Age, and AGE are three different variables.\nPython keywords, which are special words used by Python, cannot be used as variable names.\n\n\nExamples of valid variable names: name, age, student_count, _private_var, total2\nExamples of invalid variable names: 2total (starts with a number), my-var (has a hyphen), for (Python keyword)\n\nWhile Python allows variables to start with an underscore, this is generally avoided unless there’s a specific reason to do so.\n\n\n\nStoring data in variables is called assignment. In Python, this is done using the equals sign (=). The basic format is:\nvariable_name = value\nHere are some examples:\n\nx = 5\nname = \"Alice\"\npi = 3.14159\n\nThese examples create three variables:\n\nx is given the integer value 5\nname is given the string value “Alice”\npi is given the decimal value 3.14159\n\n\n\n\nPython allows assigning values to multiple variables in one line of code. This can be done in two main ways:\n\na, b, c = 1, 2, 3\nprint(f\"a = {a}, b = {b}, c = {c}\")\n\na = 1, b = 2, c = 3\n\n\nThis gives a the value 1, b the value 2, and c the value 3.\nAnother way is to give the same value to multiple variables at once:\n\na = b = c = 0\nprint(f\"a = {a}, b = {b}, c = {c}\")\n\na = 0, b = 0, c = 0\n\n\nThis sets x, y, and z all equal to 0.\nWhile multiple assignment can make code shorter, it should be used carefully to keep the code easy to read.\n\n\n\nPython is a dynamically typed language, which means you don’t need to declare the type of a variable when you create it. The interpreter infers the type based on the value assigned. However, understanding the basic types is crucial for effective programming.\n\nNumeric Types:\n\nint: Integers → 5, -3, 0\nfloat: Floating-point numbers → 3.14, -0.001, 2.0e-4\ncomplex: Complex numbers → 3+4j\n\nSequence Types:\n\nstr: Strings → \"Hello\", 'Python'\nlist: Mutable sequences → [1, 2, 3]\ntuple: Immutable sequences → (1, 2, 3)\n\n\n\n\n\nPython is a dynamically typed language, which means you don’t need to declare the type of a variable when you create it. The interpreter infers the type based on the value assigned. However, understanding the basic types is crucial for effective programming.\n\nMapping Type:\n\ndict: Key-value pairs → {\"name\": \"John\", \"age\": 30}\n\nSet Types:\n\nset: Unordered collection of unique elements → {1, 2, 3}\nfrozenset: Immutable version of set\n\nBoolean Type:\n\nbool: True or False\n\nNone Type:\n\nNone: Represents the absence of a value\n\n\n\n\n\nYou can check the type of a variable using the type() function:\n\nage = 25          # integer (int)\nheight = 1.75     # floating-point number (float)\nname = \"Bob\"      # string (str)\nis_student = True # boolean (bool)\n\nprint(type(age))\nprint(type(height))\nprint(type(name))\nprint(type(is_student))\n\n&lt;class 'int'&gt;\n&lt;class 'float'&gt;\n&lt;class 'str'&gt;\n&lt;class 'bool'&gt;\n\n\n\n\n\nPython also allows type conversion between compatible types:\n\na = int(3.14)    # Converts float to int: 3\nb = float(5)     # Converts int to float: 5.0\nc = str(42)      # Converts int to str: \"42\"\nd = bool(1)      # Converts int to bool: True\n\nprint(type(a))\nprint(type(b))\nprint(type(c))\nprint(type(d))\n\n&lt;class 'int'&gt;\n&lt;class 'float'&gt;\n&lt;class 'str'&gt;\n&lt;class 'bool'&gt;\n\n\n\n\n\nA useful feature of Python’s dynamic typing is the ability to change both the value and the type of a variable. For example:\n\nx = 5\nprint(x)\nx = \"Hello\"\nprint(x)\n\n5\nHello\n\n\nHere, x starts as an integer but is then changed to a string. While this flexibility can be useful, it should be used thoughtfully to avoid confusion.\n\n\n\nVariable type annotation, introduced in Python 3.5, allows programmers to clearly state the expected types of variables. This practice makes code easier to read, improves documentation, and helps find potential errors before the program runs.\nExamples of type annotations in Python:\n\nname: str = \"Alice\"\nage: int = 30\nheight: float = 1.75\nis_student: bool = True\nprint(f\"{age}: type {type(age)}\")\n\n30: type &lt;class 'int'&gt;\n\n\n\n\nThe annotation has nothing to do with the data type assigned.\n\nage: int = 30.5\nprint(f\"{age}: type {type(age)}\")\n\n30.5: type &lt;class 'float'&gt;",
    "crumbs": [
      "Basics",
      "Variables"
    ]
  },
  {
    "objectID": "q1_variable.html#introduction",
    "href": "q1_variable.html#introduction",
    "title": "Variables",
    "section": "",
    "text": "In computer programming, variables act as containers that store data in a program. They allow for easy management of information throughout a program’s run. Python uses a system called dynamic typing, which figures out the type of data in a variable based on what is stored in it. This feature helps make Python easy for new programmers to learn.",
    "crumbs": [
      "Basics",
      "Variables"
    ]
  },
  {
    "objectID": "q1_variable.html#variable-naming-rules",
    "href": "q1_variable.html#variable-naming-rules",
    "title": "Variables",
    "section": "",
    "text": "When creating variables in Python, certain naming rules must be followed:\n\nThe first character must be a letter (a-z, A-Z) or an underscore (_).\nAfter the first character, the name can include letters, numbers, and underscores.\nVariable names are case-sensitive. This means age, Age, and AGE are three different variables.\nPython keywords, which are special words used by Python, cannot be used as variable names.\n\n\nExamples of valid variable names: name, age, student_count, _private_var, total2\nExamples of invalid variable names: 2total (starts with a number), my-var (has a hyphen), for (Python keyword)\n\nWhile Python allows variables to start with an underscore, this is generally avoided unless there’s a specific reason to do so.",
    "crumbs": [
      "Basics",
      "Variables"
    ]
  },
  {
    "objectID": "q1_variable.html#variable-assignment",
    "href": "q1_variable.html#variable-assignment",
    "title": "Variables",
    "section": "",
    "text": "Storing data in variables is called assignment. In Python, this is done using the equals sign (=). The basic format is:\nvariable_name = value\nHere are some examples:\n\nx = 5\nname = \"Alice\"\npi = 3.14159\n\nThese examples create three variables:\n\nx is given the integer value 5\nname is given the string value “Alice”\npi is given the decimal value 3.14159",
    "crumbs": [
      "Basics",
      "Variables"
    ]
  },
  {
    "objectID": "q1_variable.html#multiple-assignment",
    "href": "q1_variable.html#multiple-assignment",
    "title": "Variables",
    "section": "",
    "text": "Python allows assigning values to multiple variables in one line of code. This can be done in two main ways:\n\na, b, c = 1, 2, 3\nprint(f\"a = {a}, b = {b}, c = {c}\")\n\na = 1, b = 2, c = 3\n\n\nThis gives a the value 1, b the value 2, and c the value 3.\nAnother way is to give the same value to multiple variables at once:\n\na = b = c = 0\nprint(f\"a = {a}, b = {b}, c = {c}\")\n\na = 0, b = 0, c = 0\n\n\nThis sets x, y, and z all equal to 0.\nWhile multiple assignment can make code shorter, it should be used carefully to keep the code easy to read.",
    "crumbs": [
      "Basics",
      "Variables"
    ]
  },
  {
    "objectID": "q1_variable.html#variable-types",
    "href": "q1_variable.html#variable-types",
    "title": "Variables",
    "section": "",
    "text": "Python is a dynamically typed language, which means you don’t need to declare the type of a variable when you create it. The interpreter infers the type based on the value assigned. However, understanding the basic types is crucial for effective programming.\n\nNumeric Types:\n\nint: Integers → 5, -3, 0\nfloat: Floating-point numbers → 3.14, -0.001, 2.0e-4\ncomplex: Complex numbers → 3+4j\n\nSequence Types:\n\nstr: Strings → \"Hello\", 'Python'\nlist: Mutable sequences → [1, 2, 3]\ntuple: Immutable sequences → (1, 2, 3)",
    "crumbs": [
      "Basics",
      "Variables"
    ]
  },
  {
    "objectID": "q1_variable.html#variable-types-1",
    "href": "q1_variable.html#variable-types-1",
    "title": "Variables",
    "section": "",
    "text": "Python is a dynamically typed language, which means you don’t need to declare the type of a variable when you create it. The interpreter infers the type based on the value assigned. However, understanding the basic types is crucial for effective programming.\n\nMapping Type:\n\ndict: Key-value pairs → {\"name\": \"John\", \"age\": 30}\n\nSet Types:\n\nset: Unordered collection of unique elements → {1, 2, 3}\nfrozenset: Immutable version of set\n\nBoolean Type:\n\nbool: True or False\n\nNone Type:\n\nNone: Represents the absence of a value",
    "crumbs": [
      "Basics",
      "Variables"
    ]
  },
  {
    "objectID": "q1_variable.html#check-variable-types",
    "href": "q1_variable.html#check-variable-types",
    "title": "Variables",
    "section": "",
    "text": "You can check the type of a variable using the type() function:\n\nage = 25          # integer (int)\nheight = 1.75     # floating-point number (float)\nname = \"Bob\"      # string (str)\nis_student = True # boolean (bool)\n\nprint(type(age))\nprint(type(height))\nprint(type(name))\nprint(type(is_student))\n\n&lt;class 'int'&gt;\n&lt;class 'float'&gt;\n&lt;class 'str'&gt;\n&lt;class 'bool'&gt;",
    "crumbs": [
      "Basics",
      "Variables"
    ]
  },
  {
    "objectID": "q1_variable.html#variable-types-conversion",
    "href": "q1_variable.html#variable-types-conversion",
    "title": "Variables",
    "section": "",
    "text": "Python also allows type conversion between compatible types:\n\na = int(3.14)    # Converts float to int: 3\nb = float(5)     # Converts int to float: 5.0\nc = str(42)      # Converts int to str: \"42\"\nd = bool(1)      # Converts int to bool: True\n\nprint(type(a))\nprint(type(b))\nprint(type(c))\nprint(type(d))\n\n&lt;class 'int'&gt;\n&lt;class 'float'&gt;\n&lt;class 'str'&gt;\n&lt;class 'bool'&gt;",
    "crumbs": [
      "Basics",
      "Variables"
    ]
  },
  {
    "objectID": "q1_variable.html#variable-reassignment",
    "href": "q1_variable.html#variable-reassignment",
    "title": "Variables",
    "section": "",
    "text": "A useful feature of Python’s dynamic typing is the ability to change both the value and the type of a variable. For example:\n\nx = 5\nprint(x)\nx = \"Hello\"\nprint(x)\n\n5\nHello\n\n\nHere, x starts as an integer but is then changed to a string. While this flexibility can be useful, it should be used thoughtfully to avoid confusion.",
    "crumbs": [
      "Basics",
      "Variables"
    ]
  },
  {
    "objectID": "q1_variable.html#variable-type-annotation",
    "href": "q1_variable.html#variable-type-annotation",
    "title": "Variables",
    "section": "",
    "text": "Variable type annotation, introduced in Python 3.5, allows programmers to clearly state the expected types of variables. This practice makes code easier to read, improves documentation, and helps find potential errors before the program runs.\nExamples of type annotations in Python:\n\nname: str = \"Alice\"\nage: int = 30\nheight: float = 1.75\nis_student: bool = True\nprint(f\"{age}: type {type(age)}\")\n\n30: type &lt;class 'int'&gt;\n\n\n\n\nThe annotation has nothing to do with the data type assigned.\n\nage: int = 30.5\nprint(f\"{age}: type {type(age)}\")\n\n30.5: type &lt;class 'float'&gt;",
    "crumbs": [
      "Basics",
      "Variables"
    ]
  }
]